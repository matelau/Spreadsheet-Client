// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadSheetGUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UITooSeriousSpreadsheeWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UITooSeriousSpreadsheeWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            #endregion

            // Last mouse action was not recorded.

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(50, 41));

            // Type '=a1{Back}2{+}a2{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(66, 59));

            // Type '=a3{+}a3{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(47, 84));

            // Type '=a4' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);

            // Type '{RShiftKey}{+}a4{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(51, 102));

            // Type '=a5{+}a5{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys4, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(63, 113));

            // Type '=a6{+}a6{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys5, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(83, 143));

            // Type '=a7' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys6, ModifierKeys.None);

            // Type '{RShiftKey}{+}a7{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys7, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(105, 158));

            // Type '=a8{+}a8{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys8, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(51, 182));

            // Type '=a9{+}a9{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys9, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(70, 196));

            // Type '=a10{+}a10{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod1Params.UISpreadsheetPanel1ClientSendKeys10, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UITooSeriousSpreadsheeWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Verify that 'spreadsheetPanel1' client's property 'ControlType' equals 'Client'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UISpreadsheetPanel1ClientControlType, uISpreadsheetPanel1Client.ControlType.ToString());
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UITooSeriousSpreadsheeWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UITooSeriousSpreadsheeWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(64, 224));

            // Type '{NumPad1}{NumPad0}{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod2Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(50, 34));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uIValueEdit = this.UITooSeriousSpreadsheeWindow.UIValueWindow.UIValueEdit;
            WinEdit uIContentEdit = this.UITooSeriousSpreadsheeWindow.UIContentWindow.UIContentEdit;
            #endregion

            // Verify that 'value' text box's property 'ControlType' equals 'Edit'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIValueEditControlType, uIValueEdit.ControlType.ToString());

            // Verify that 'content' text box's property 'ControlType' equals 'Edit'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIContentEditControlType, uIContentEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UITooSeriousSpreadsheeWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uIOpenMenuItem = this.UITooSeriousSpreadsheeWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uITypeEdit = this.UIOpenWindow.UIItemWindow.UITest3ListItem.UITypeEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinList uIItemsViewList = this.UIOpenWindow.UIShellViewClient.UIItemsViewList;
            WinButton uIOpenButton1 = this.UIOpenWindow.UIOpenWindow2.UIOpenButton;
            WinClient uISpreadsheetPanel1Client = this.UITooSeriousSpreadsheeWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(10, 11));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(67, 9));

            // Click 'Type' text box
            Mouse.Click(uITypeEdit, new Point(23, 1));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(50, 16));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(25, 12));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(59, 18));

            // Select '' in 'Items View' list box
            uIItemsViewList.SelectedItemsAsString = this.RecordedMethod3Params.UIItemsViewListSelectedItemsAsString;

            // Click '&Open' button
            Mouse.Click(uIOpenButton1, new Point(41, 11));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(63, 221));
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uIValueEdit = this.UITooSeriousSpreadsheeWindow.UIValueWindow.UIValueEdit;
            WinWindow uIContentWindow = this.UITooSeriousSpreadsheeWindow.UITooSeriousSpreadsheeClient.UIContentWindow;
            #endregion

            // Verify that 'value' text box's property 'ControlType' equals '10'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIValueEditControlType, uIValueEdit.ControlType.ToString());

            // Verify that 'content' window's property 'ClassName' equals '10'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIContentWindowClassName, uIContentWindow.ClassName);
        }
        
        /// <summary>
        /// RecordedMethod4
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UITooSeriousSpreadsheeWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(54, 33));
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinWindow uIValueWindow = this.UITooSeriousSpreadsheeWindow.UITooSeriousSpreadsheeClient.UIValueWindow;
            WinEdit uICellSelectedEdit = this.UITooSeriousSpreadsheeWindow.UIA1Window.UICellSelectedEdit;
            #endregion

            // Verify that 'Value' window's property 'ClassName' equals '5120'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIValueWindowClassName, uIValueWindow.ClassName);

            // Verify that 'cellSelected' text box's property 'ControlType' equals 'A1'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UICellSelectedEditControlType, uICellSelectedEdit.ControlType.ToString());
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UITooSeriousSpreadsheeWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uIOpenMenuItem = this.UITooSeriousSpreadsheeWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uISizeEdit = this.UIOpenWindow.UIItemWindow.UITest2ListItem.UISizeEdit;
            WinList uIItemsViewList = this.UIOpenWindow.UIShellViewClient.UIItemsViewList;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinMenuItem uISaveAsMenuItem = this.UITooSeriousSpreadsheeWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            #endregion

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(25, 13));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(61, 16));

            // Click 'Size' text box
            Mouse.Click(uISizeEdit, new Point(7, 5));

            // Select '' in 'Items View' list box
            uIItemsViewList.SelectedItemsAsString = this.RecordedMethod5Params.UIItemsViewListSelectedItemsAsString;

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(58, 11));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(29, 17));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(67, 9));
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinControl uISaveAsDialog = this.UISaveAsWindow.UISaveAsDialog;
            #endregion

            // Verify that 'Save As' Dialog's property 'ControlType' equals 'Dialog'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UISaveAsDialogControlType, uISaveAsDialog.ControlType.ToString());
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinList uIItemsViewList = this.UISaveAsWindow.UIShellViewClient.UIItemsViewList;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Select '' in 'Items View' list box
            uIItemsViewList.SelectedItemsAsString = this.RecordedMethod6Params.UIItemsViewListSelectedItemsAsString;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(37, 18));
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WinWindow uIConfirmSaveAsWindow = this.UIConfirmSaveAsWindow;
            #endregion

            // Verify that 'Confirm Save As' window's property 'ClassName' equals '#32770'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UIConfirmSaveAsWindowClassName, uIConfirmSaveAsWindow.ClassName);
        }
        
        /// <summary>
        /// RecordedMethod7
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UITooSeriousSpreadsheeWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uINewMenuItem = this.UITooSeriousSpreadsheeWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIFileMenuItem1 = this.UITooSeriousSpreadsheeWindow1.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuBar uIMenuStrip1MenuBar = this.UITooSeriousSpreadsheeWindow1.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinMenuItem uICloseMenuItem = this.UITooSeriousSpreadsheeWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(16, 19));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(41, 9));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem1, new Point(8, 14));

            // Click 'menuStrip1' menu bar
            Mouse.Click(uIMenuStrip1MenuBar, new Point(264, 22));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(59, 7));
        }
        
        /// <summary>
        /// AssertMethod7 - Use 'AssertMethod7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod7()
        {
            #region Variable Declarations
            WinWindow uITooSeriousSpreadsheeWindow = this.UITooSeriousSpreadsheeWindow;
            #endregion

            // Verify that 'TooSerious Spreadsheet' window's property 'ClassName' equals 'WindowsForms10.Window.8.app.0.2bf8098_r11_ad1'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UITooSeriousSpreadsheeWindowClassName, uITooSeriousSpreadsheeWindow.ClassName);
        }
        
        /// <summary>
        /// RecordedMethod8
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UITooSeriousSpreadsheeWindow.UIMenuStrip1MenuBar.UIHelpMenuItem;
            #endregion

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(27, 3));
        }
        
        /// <summary>
        /// AssertMethod8 - Use 'AssertMethod8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod8()
        {
            #region Variable Declarations
            WinWindow uIItemWindow1 = this.UIItemWindow.UIItemWindow1;
            #endregion

            // Verify that 'Unknown Name' window's property 'ClassName' equals '#32770'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UIItemWindow1ClassName, uIItemWindow1.ClassName);
        }
        
        /// <summary>
        /// RecordedMethod9
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetPanel1Client = this.UITooSeriousSpreadsheeWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(32, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(32, 19));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(576, 242));
        }
        
        /// <summary>
        /// AssertMethod9 - Use 'AssertMethod9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod9()
        {
            #region Variable Declarations
            WinEdit uICellSelectedEdit = this.UITooSeriousSpreadsheeWindow.UIA1Window.UICellSelectedEdit;
            #endregion

            // Verify that 'cellSelected' text box's property 'ControlType' equals 'G11'
            Assert.AreEqual(this.AssertMethod9ExpectedValues.UICellSelectedEditControlType, uICellSelectedEdit.ControlType.ToString());
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual AssertMethod7ExpectedValues AssertMethod7ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod7ExpectedValues == null))
                {
                    this.mAssertMethod7ExpectedValues = new AssertMethod7ExpectedValues();
                }
                return this.mAssertMethod7ExpectedValues;
            }
        }
        
        public virtual AssertMethod8ExpectedValues AssertMethod8ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod8ExpectedValues == null))
                {
                    this.mAssertMethod8ExpectedValues = new AssertMethod8ExpectedValues();
                }
                return this.mAssertMethod8ExpectedValues;
            }
        }
        
        public virtual AssertMethod9ExpectedValues AssertMethod9ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod9ExpectedValues == null))
                {
                    this.mAssertMethod9ExpectedValues = new AssertMethod9ExpectedValues();
                }
                return this.mAssertMethod9ExpectedValues;
            }
        }
        
        public UITooSeriousSpreadsheeWindow UITooSeriousSpreadsheeWindow
        {
            get
            {
                if ((this.mUITooSeriousSpreadsheeWindow == null))
                {
                    this.mUITooSeriousSpreadsheeWindow = new UITooSeriousSpreadsheeWindow();
                }
                return this.mUITooSeriousSpreadsheeWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UITooSeriousSpreadsheeWindow1 UITooSeriousSpreadsheeWindow1
        {
            get
            {
                if ((this.mUITooSeriousSpreadsheeWindow1 == null))
                {
                    this.mUITooSeriousSpreadsheeWindow1 = new UITooSeriousSpreadsheeWindow1();
                }
                return this.mUITooSeriousSpreadsheeWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private AssertMethod9ExpectedValues mAssertMethod9ExpectedValues;
        
        private UITooSeriousSpreadsheeWindow mUITooSeriousSpreadsheeWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UITooSeriousSpreadsheeWindow1 mUITooSeriousSpreadsheeWindow1;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=a1{Back}2{+}a2{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "=a1{Back}2{+}a2{Enter}";
        
        /// <summary>
        /// Type '=a3{+}a3{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "=a3{+}a3{Enter}";
        
        /// <summary>
        /// Type '=a4' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "=a4";
        
        /// <summary>
        /// Type '{RShiftKey}{+}a4{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys3 = "{RShiftKey}{+}a4{Enter}";
        
        /// <summary>
        /// Type '=a5{+}a5{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys4 = "=a5{+}a5{Enter}";
        
        /// <summary>
        /// Type '=a6{+}a6{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys5 = "=a6{+}a6{Enter}";
        
        /// <summary>
        /// Type '=a7' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys6 = "=a7";
        
        /// <summary>
        /// Type '{RShiftKey}{+}a7{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys7 = "{RShiftKey}{+}a7{Enter}";
        
        /// <summary>
        /// Type '=a8{+}a8{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys8 = "=a8{+}a8{Enter}";
        
        /// <summary>
        /// Type '=a9{+}a9{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys9 = "=a9{+}a9{Enter}";
        
        /// <summary>
        /// Type '=a10{+}a10{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys10 = "=a10{+}a10{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'spreadsheetPanel1' client's property 'ControlType' equals 'Client'
        /// </summary>
        public string UISpreadsheetPanel1ClientControlType = "Client";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}{NumPad0}{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "{NumPad1}{NumPad0}{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'value' text box's property 'ControlType' equals 'Edit'
        /// </summary>
        public string UIValueEditControlType = "Edit";
        
        /// <summary>
        /// Verify that 'content' text box's property 'ControlType' equals 'Edit'
        /// </summary>
        public string UIContentEditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Select '' in 'Items View' list box
        /// </summary>
        public string UIItemsViewListSelectedItemsAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'value' text box's property 'ControlType' equals '10'
        /// </summary>
        public string UIValueEditControlType = "10";
        
        /// <summary>
        /// Verify that 'content' window's property 'ClassName' equals '10'
        /// </summary>
        public string UIContentWindowClassName = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Value' window's property 'ClassName' equals '5120'
        /// </summary>
        public string UIValueWindowClassName = "5120";
        
        /// <summary>
        /// Verify that 'cellSelected' text box's property 'ControlType' equals 'A1'
        /// </summary>
        public string UICellSelectedEditControlType = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Select '' in 'Items View' list box
        /// </summary>
        public string UIItemsViewListSelectedItemsAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Save As' Dialog's property 'ControlType' equals 'Dialog'
        /// </summary>
        public string UISaveAsDialogControlType = "Dialog";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Select '' in 'Items View' list box
        /// </summary>
        public string UIItemsViewListSelectedItemsAsString = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Confirm Save As' window's property 'ClassName' equals '#32770'
        /// </summary>
        public string UIConfirmSaveAsWindowClassName = "#32770";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'TooSerious Spreadsheet' window's property 'ClassName' equals 'WindowsForms10.Window.8.app.0.2bf8098_r11_ad1'
        /// </summary>
        public string UITooSeriousSpreadsheeWindowClassName = "WindowsForms10.Window.8.app.0.2bf8098_r11_ad1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' window's property 'ClassName' equals '#32770'
        /// </summary>
        public string UIItemWindow1ClassName = "#32770";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellSelected' text box's property 'ControlType' equals 'G11'
        /// </summary>
        public string UICellSelectedEditControlType = "G11";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITooSeriousSpreadsheeWindow : WinWindow
    {
        
        public UITooSeriousSpreadsheeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "TooSerious Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIValueWindow UIValueWindow
        {
            get
            {
                if ((this.mUIValueWindow == null))
                {
                    this.mUIValueWindow = new UIValueWindow(this);
                }
                return this.mUIValueWindow;
            }
        }
        
        public UIContentWindow UIContentWindow
        {
            get
            {
                if ((this.mUIContentWindow == null))
                {
                    this.mUIContentWindow = new UIContentWindow(this);
                }
                return this.mUIContentWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UITooSeriousSpreadsheeClient UITooSeriousSpreadsheeClient
        {
            get
            {
                if ((this.mUITooSeriousSpreadsheeClient == null))
                {
                    this.mUITooSeriousSpreadsheeClient = new UITooSeriousSpreadsheeClient(this);
                }
                return this.mUITooSeriousSpreadsheeClient;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UIValueWindow mUIValueWindow;
        
        private UIContentWindow mUIContentWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UITooSeriousSpreadsheeClient mUITooSeriousSpreadsheeClient;
        
        private UIA1Window mUIA1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIValueWindow : WinWindow
    {
        
        public UIValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "value";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueEdit
        {
            get
            {
                if ((this.mUIValueEdit == null))
                {
                    this.mUIValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueEdit.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUIValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIContentWindow : WinWindow
    {
        
        public UIContentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "content";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentEdit
        {
            get
            {
                if ((this.mUIContentEdit == null))
                {
                    this.mUIContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentEdit.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUIContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITooSeriousSpreadsheeClient : WinClient
    {
        
        public UITooSeriousSpreadsheeClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "TooSerious Spreadsheet";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UIContentWindow
        {
            get
            {
                if ((this.mUIContentWindow == null))
                {
                    this.mUIContentWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIContentWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIContentWindow.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUIContentWindow;
            }
        }
        
        public WinWindow UIValueWindow
        {
            get
            {
                if ((this.mUIValueWindow == null))
                {
                    this.mUIValueWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIValueWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Value";
                    this.mUIValueWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUIValueWindow.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUIValueWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIContentWindow;
        
        private WinWindow mUIValueWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellSelected";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellSelectedEdit
        {
            get
            {
                if ((this.mUICellSelectedEdit == null))
                {
                    this.mUICellSelectedEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellSelectedEdit.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUICellSelectedEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellSelectedEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIShellViewClient UIShellViewClient
        {
            get
            {
                if ((this.mUIShellViewClient == null))
                {
                    this.mUIShellViewClient = new UIShellViewClient(this);
                }
                return this.mUIShellViewClient;
            }
        }
        
        public UIOpenWindow2 UIOpenWindow2
        {
            get
            {
                if ((this.mUIOpenWindow2 == null))
                {
                    this.mUIOpenWindow2 = new UIOpenWindow2(this);
                }
                return this.mUIOpenWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIShellViewClient mUIShellViewClient;
        
        private UIOpenWindow2 mUIOpenWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITest3ListItem UITest3ListItem
        {
            get
            {
                if ((this.mUITest3ListItem == null))
                {
                    this.mUITest3ListItem = new UITest3ListItem(this);
                }
                return this.mUITest3ListItem;
            }
        }
        
        public UITest2ListItem UITest2ListItem
        {
            get
            {
                if ((this.mUITest2ListItem == null))
                {
                    this.mUITest2ListItem = new UITest2ListItem(this);
                }
                return this.mUITest2ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITest3ListItem mUITest3ListItem;
        
        private UITest2ListItem mUITest2ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITest3ListItem : WinListItem
    {
        
        public UITest3ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UITypeEdit
        {
            get
            {
                if ((this.mUITypeEdit == null))
                {
                    this.mUITypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Type";
                    this.mUITypeEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUITypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITest2ListItem : WinListItem
    {
        
        public UITest2ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UISizeEdit
        {
            get
            {
                if ((this.mUISizeEdit == null))
                {
                    this.mUISizeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISizeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Size";
                    this.mUISizeEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUISizeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISizeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIShellViewClient : WinClient
    {
        
        public UIShellViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Shell Folder View";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenWindow2 : WinWindow
    {
        
        public UIOpenWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinControl UISaveAsDialog
        {
            get
            {
                if ((this.mUISaveAsDialog == null))
                {
                    this.mUISaveAsDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUISaveAsDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Save As";
                    this.mUISaveAsDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUISaveAsDialog.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveAsDialog;
            }
        }
        
        public UIShellViewClient1 UIShellViewClient
        {
            get
            {
                if ((this.mUIShellViewClient == null))
                {
                    this.mUIShellViewClient = new UIShellViewClient1(this);
                }
                return this.mUIShellViewClient;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUISaveAsDialog;
        
        private UIShellViewClient1 mUIShellViewClient;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIShellViewClient1 : WinClient
    {
        
        public UIShellViewClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Shell Folder View";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITooSeriousSpreadsheeWindow1 : WinWindow
    {
        
        public UITooSeriousSpreadsheeWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "TooSerious Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("TooSerious Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("TooSerious Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow1.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
                    #endregion
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
